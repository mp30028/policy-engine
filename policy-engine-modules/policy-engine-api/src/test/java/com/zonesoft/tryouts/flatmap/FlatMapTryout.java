package com.zonesoft.tryouts.flatmap;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FlatMapTryout {
	private static final Logger LOGGER = LoggerFactory.getLogger(FlatMapTryout.class);

	@Test
	void testFlatMap() {

		List<List<Integer>> number = new ArrayList<>();
		number.add(Arrays.asList(1, 2));
		number.add(Arrays.asList(3, 4));
		number.add(Arrays.asList(5, 6));
		number.add(Arrays.asList(7, 8));
		LOGGER.debug("FROM SerialisationTryout.testFlatMap: List of list={}", number);

 
		List<Integer> flatList = number.stream().flatMap(list -> list.stream()).collect(Collectors.toList());
		LOGGER.debug("FROM SerialisationTryout.testFlatMap: List generated by flatList={}", flatList);

		List<Integer> flatListOfOddNumbers = number.stream().map(item -> item.get(0)).toList();
		LOGGER.debug("FROM SerialisationTryout.testFlatMap: List generated by flatListOfOddNumbers={}", flatListOfOddNumbers);		
	}



	@Test
	void testMap() {
		{
			// making the array list object
			ArrayList<String> fruit = new ArrayList<>();
			fruit.add("Apple");
			fruit.add("mango");
			fruit.add("pineapple");
			fruit.add("kiwi");
			System.out.println("List of fruit-" + fruit);

			// lets use map() to convert list of fruit
			List<Integer> list = fruit.stream().map(s -> s.length()).collect(Collectors.toList());
			System.out.println("List generated by map-" + list);
		}

	}
}
